using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class AvatarSyncModel
{
    [RealtimeProperty(1, true, true)] private int _avatarType;
    
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class AvatarSyncModel : RealtimeModel {
    public int avatarType {
        get {
            return _avatarTypeProperty.value;
        }
        set {
            if (_avatarTypeProperty.value == value) return;
            _avatarTypeProperty.value = value;
            InvalidateReliableLength();
            FireAvatarTypeDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(AvatarSyncModel model, T value);
    public event PropertyChangedHandler<int> avatarTypeDidChange;
    
    public enum PropertyID : uint {
        AvatarType = 1,
    }
    
    #region Properties
    
    private ReliableProperty<int> _avatarTypeProperty;
    
    #endregion
    
    public AvatarSyncModel() : base(null) {
        _avatarTypeProperty = new ReliableProperty<int>(1, _avatarType);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _avatarTypeProperty.UnsubscribeCallback();
    }
    
    private void FireAvatarTypeDidChange(int value) {
        try {
            avatarTypeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _avatarTypeProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _avatarTypeProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.AvatarType: {
                    changed = _avatarTypeProperty.Read(stream, context);
                    if (changed) FireAvatarTypeDidChange(avatarType);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _avatarType = avatarType;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
